SELECT * FROM LITA_Capstone
-- UNIVARIATE ANALYSIS
---- Calculating Total Revenue
Select SUM(Revenue) as Total_Revenue
FROM LITA_Capstone

-- Calculating Total Quantity Sold
Select SUM(Quantity) as Total_Quantity_Sold
FROM LITA_Capstone


-- TIME-BASED ANALYSIS
-- In this section, we calculate the revenue generated by Year, Quarter, and Month for the two sales years; 2023 and 2024
---- By Year
SELECT 
	CASE 
		WHEN OrderYear = '2023' THEN 2023 ELSE 2024 
	END AS Sales_Year,
	SUM(Revenue) AS Total_Revenue
FROM LITA_Capstone
GROUP BY 
	CASE 
		WHEN OrderYear = '2023' THEN 2023 ELSE 2024 
	END

---- By Quarter
WITH SalesData AS (
    SELECT 
        OrderYear,
        CASE 
            WHEN OrderMonth BETWEEN 1 AND 3 THEN 'Quarter_1'
            WHEN OrderMonth BETWEEN 4 AND 6 THEN 'Quarter_2'
            WHEN OrderMonth BETWEEN 7 AND 9 THEN 'Quarter_3'
            ELSE 'Quarter_4'
        END AS Quarter,
        Revenue
    FROM LITA_Capstone
)
SELECT
    Quarter,
    SUM(CASE WHEN OrderYear = '2023' THEN Revenue ELSE 0 END) AS Revenue_2023,
    COALESCE(CAST(SUM(CASE WHEN OrderYear = '2024' THEN Revenue ELSE NULL END) AS VARCHAR),' ') AS Revenue_2024 
FROM SalesData
GROUP BY Quarter
ORDER BY Quarter

------ By Month
WITH Year2023 AS (
	SELECT OrderMonth, SUM(Revenue) AS Monthly_Revenue2023
	FROM LITA_Capstone
	WHERE OrderYear = '2023'
	GROUP BY OrderMonth 
	),
Year2024 AS (
	SELECT OrderMonth, SUM(Revenue) AS Monthly_Revenue2024
	FROM LITA_Capstone
	WHERE OrderYear = '2024'
	GROUP BY OrderMonth
	)
SELECT 
	f.OrderMonth, f.Monthly_Revenue2023, COALESCE(CAST(s.Monthly_Revenue2024 AS VARCHAR), ' ') AS Monthly_Revenue2024
FROM Year2023 AS f
LEFT JOIN Year2024 AS s
ON f.OrderMonth = s.OrderMonth
ORDER BY f.OrderMonth


-- PRODUCT ANALYSIS
-- An analysis of the products is done in this section to know the quantities of the products sold and the revenue generated.
WITH Revenue_Generated AS (
	SELECT 
		Product, 
		SUM(Revenue) AS Total_Revenue
	FROM [dbo].[LITA_Capstone]		
	GROUP BY Product),
Quantity_Sold AS (
	SELECT 
		Product,
		SUM(Quantity) AS Quantity_Sold
	FROM [dbo].[LITA_Capstone]		
	GROUP BY Product)
SELECT r.Product, q.Quantity_Sold, r.Total_Revenue
FROM Revenue_Generated as r
JOIN Quantity_Sold as q
ON r.Product = q.Product
ORDER BY q.Quantity_sold DESC

-- We want to show in this section the quantities sold per year
WITH Product_Data2023 AS (
	SELECT Product, SUM(Quantity) AS Quantity_Sold2023, SUM(Revenue) AS Revenue_Generated2023
	FROM LITA_Capstone
	WHERE OrderYear = '2023'
	GROUP BY Product
	),
Product_Data2024 AS (
	SELECT Product, SUM(Quantity) AS Quantity_Sold2024, SUM(Revenue) AS Revenue_Generated2024
	FROM LITA_Capstone
	WHERE OrderYear = '2024'
	GROUP BY Product
	)
SELECT f.Product, f.Quantity_Sold2023, s.Quantity_Sold2024, f.Revenue_Generated2023, s.Revenue_Generated2024
FROM Product_Data2023 AS f
JOIN Product_Data2024 AS s
ON f.Product = s.Product


--REGIONAL ANALYSIS
WITH Regional_Revenue AS (
	SELECT Region, SUM(Revenue) AS GeneratedRevenue
	FROM [dbo].[LITA_Capstone]
	GROUP BY Region
	),
Regional_Quantity AS (
	SELECT Region, SUM(Quantity) AS QuantitySold
	FROM [dbo].[LITA_Capstone]
	GROUP BY Region
	)
SELECT r.Region, q.QuantitySold, r.GeneratedRevenue
FROM Regional_Revenue AS r
JOIN Regional_Quantity AS q
ON r.Region = q.Region

-- In this section we calculate the Quantity Sold, Average Quantity Sold, Generated Revenue and Average Revenue for the Regions Over the two sales years.
WITH Regional_Data2023 AS (
	SELECT Region, SUM(Quantity) AS QuantitySold2023, AVG(Quantity) AS AverageQuantity2023, 
		SUM(Revenue) AS GeneratedRevenue2023, AVG(Revenue) AS AverageRevenue2023
	FROM [dbo].[LITA_Capstone]
	WHERE OrderYear = '2023'
	GROUP BY Region
	),
Regional_Data2024 AS (
	SELECT Region, SUM(Quantity) AS QuantitySold2024, AVG(Quantity) AS AverageQuantity2024, 
		SUM(Revenue) AS GeneratedRevenue2024, AVG(Revenue) AS AverageRevenue2024
	FROM [dbo].[LITA_Capstone]
	WHERE OrderYear = '2024'
	GROUP BY Region
	)
SELECT f.Region, f.QuantitySold2023, AverageQuantity2023, s.QuantitySold2024, AverageQuantity2024, f.GeneratedRevenue2023, 
	   f.AverageRevenue2023, s.GeneratedRevenue2024, s.AverageRevenue2024
FROM Regional_Data2023 AS f
JOIN Regional_Data2024 AS s
ON f.Region = s.Region

-- CUSTOMER ANALYSIS
SELECT Customer_Id, SUM(Quantity) AS QuantityBought, SUM(Revenue) AS TotalRevenue, COUNT(Customer_Id) AS Frequency
FROM [dbo].[LITA_Capstone]
GROUP BY Customer_Id
ORDER BY TotalRevenue

-- RFM Segmentation
DECLARE @Today DATE = '2025-05-10';
WITH RFM_Calculation AS (
    SELECT 
        Customer_Id,
        MAX(OrderDate) AS LastPurchaseDate,
        COUNT(DISTINCT OrderID) AS Frequency,
        SUM(Revenue) AS Monetary
    FROM LITA_Capstone
    GROUP BY Customer_Id
),
RFM_With_Recency AS (
    SELECT 
        Customer_Id,
        DATEDIFF(DAY, LastPurchaseDate, @Today) AS Recency,
        Frequency,
        Monetary
    FROM RFM_Calculation
)
SELECT 
    Customer_Id,
    Recency,
    Frequency,
    Monetary,
    -- Invert recency score: lower days → higher score
    CASE 
        WHEN Recency <= 30 THEN 5
        WHEN Recency <= 60 THEN 4
        WHEN Recency <= 90 THEN 3
        WHEN Recency <= 120 THEN 2
        ELSE 1
    END AS R_Score,
    CASE 
        WHEN Frequency >= 10 THEN 5
        WHEN Frequency >= 7 THEN 4
        WHEN Frequency >= 4 THEN 3
        WHEN Frequency >= 2 THEN 2
        ELSE 1
    END AS F_Score,
    CASE 
        WHEN Monetary >= 1000 THEN 5
        WHEN Monetary >= 750 THEN 4
        WHEN Monetary >= 500 THEN 3
        WHEN Monetary >= 250 THEN 2
        ELSE 1
    END AS M_Score
FROM RFM_With_Recency
